#!/usr/bin/env python3

import os
import sys
import io


def header(file: io.TextIOWrapper):
    file.write('" Vim syntax file' + "\n")
    file.write('" Language: Mince Programming Language' + "\n")
    file.write('" Maintainer: Nathaniel Ramos <nathanielramos726@gmail.com>' + "\n")
    file.write('" Latest Revision: 31 July 2022' + "\n")
    newline(file)

def newline(file: io.TextIOWrapper):
    file.write("\n")

def syntax(file: io.TextIOWrapper):
    file.write("syn keyword mcTodo contained TODO FIXME XXX NOTE\n")
    file.write("syn match mcComment " + "#.*$ contains=mcTodo\n")
    newline(file)
    file.write("syn match mcNumber " + "'\d\+'" + " contained display\n")
    file.write("syn match mcNumber " + "'[-+]\d\+'" + " contained display\n")
    newline(file)
    file.write("syn match mcNumber " + "'[-+]\=\d[[:digit:]]*[eE][\-+]\=\d\+'" + " contained display\n")
    file.write("syn match mcNumber " + "'\d[[:digit:]]*[eE]][\-+]\=\d\+'" + " contained display\n")
    newline(file)
    file.write("syn region mcString start=\'\"\'" + "end=\'\"\' contained\n")
    file.write("syn region mcDesc start=\'\"\'" + "end=\'\"\'\n")
    newline(file)
    file.write("syn match mcHip '\d\{1.6}' nextgroup=mcString\n")
    file.write("syn match mcFunction \"\h\w*\" display contained\n")
    newline(file)
    file.write("syn region mcDescBlock start=\"{\" end=\"}\" fold transparent contains=mcNumber, mcFunction, mcTodo, mcConditional, mcRepeat, mcStatement, mcDesc, mcBuiltin, mcOperator, mcComment, mcString\n")
    newline(file)    

def keyword(file: io.TextIOWrapper):
    file.write("\" Keywords\n")
    file.write("syn keyword mcFunction define goto\n")
    file.write("syn keyword mcConditional if else\n")
    file.write("syn keyword mcRepeat while\n")
    file.write("syn keyword mcStatement print! println!\n")
    file.write("syn keyword mcBuiltin break exit\n")
    file.write("syn keyword mcOperator or and true false\n")
    newline(file)

def setCurS(file: io.TextIOWrapper):
    file.write("\" Set current syntax\n") 
    file.write("let b:current_syntax = \"mc\"\n")

def check(file: io.TextIOWrapper):
    file.write("if exists(" + '"b:current_syntax"' + "\n")
    file.write("  finish\n")
    file.write("endif\n")


def highlight(file: io.TextIOWrapper):
    newline(file)
    file.write("\" highlighting \n")
    file.write("hi def link mcTodo              Todo\n")
    file.write("hi def link mcComment           Comment\n")
    file.write("hi def link mcStatement         Statement\n")
    file.write("hi def link mcFunction          Function\n")
    file.write("hi def link mcConditional       Conditional\n")
    file.write("hi def link mcString            String\n")
    file.write("hi def link mcDesc              Define\n")
    file.write("hi def link mcNumber            Constant\n")
    file.write("hi def link mcRepeat            Repeat\n")
    file.write("hi def link mcOperator          Operator\n")
    newline(file)

args = []

if __name__ == "__main__":

    if sys.argv[1] == "syntax":

        with open("mc.vim", "w") as f:

         
            header(f)

            check(f)

            syntax(f)
            keyword(f)

            setCurS(f)


            highlight(f)


    elif sys.argv[1] == "install":
        os.system("install ./mc.vim /home/nathan/.config/nvim/syntax")
    elif sys.argv[1] == "clean":
        os.system("rm mc.vim")
        
    elif sys.argv[1] != str(args).strip():
        args.append("syntax")
        args.append("install")
        args.append("clean")
        print(f"Available arguments are: {str(args)}")
        exit(1)
